const puppeteer = require('puppeteer');
const fs = require('fs');

const url = '';
const loginUrl = '';
const email = '';
const password = '';

async () => {
  const browser = await puppeteer.launch({ headless: 'new' });
  const page = await browser.newPage();
  await page.setViewport({ width: 1280, height: 800 });

  await page.goto(loginUrl, { waitUntil: 'networkidle2' });

  await page.type('input[name="email"]', email, { delay: 100 });
  await page.type('input[name="password"]', password, { delay: 100 });
  await page.click('button[type="submit"]');

  await page.waitForNavigation({ waitUntil: 'networkidle2' });

  await page.goto(url, { waitUntil: 'networkidle2' });

  await page.waitForSelector('article', { timeout: 10000 }).catch(() => {
    console.warn('⚠️ No articles loaded in time.');
  });

  await page.evaluate(async () => {
    await new Promise(resolve => {
      let totalHeight = 0;
      const distance = 100;
      const timer = setInterval(() => {
        const scrollHeight = document.body.scrollHeight;
        window.scrollBy(0, distance);
        totalHeight += distance;

        if (totalHeight >= scrollHeight) {
          clearInterval(timer);
          resolve();
        }
      }, 100);
    });
  });

  const results = await page.evaluate(() => {
    const articles = Array.from(document.querySelectorAll('article'));
    return articles.map(article => {
      const linkEl = article.querySelector('a[title][href]');
      const imgEl = article.querySelector('img[type="post"][srcset]');

      return linkEl && imgEl
        ? {
            title: linkEl.getAttribute('title'),
            url: linkEl.getAttribute('href'),
            image: imgEl.getAttribute('src'),
          }
        : null;
    }).filter(Boolean);
  });

  fs.writeFileSync('posts.json', JSON.stringify(results, null, 2));
  console.log(`✅ Saved ${results.length} posts to posts.json`);

  await browser.close();
})();
